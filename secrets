#!/usr/bin/perl

use strict;
use warnings;

=head1 NAME

B<secrets> - Simple secure storage for logins and passphrases.

=head1 VERSION

1.02 - Rewrite for multiple operations.

=head1 SYNOPSIS

B<secrets> is a simple secure store for logins and passphrases.

    Usage: secrets [options] 

    Options:

        --file=FILE     - Optional file containing secrets.
                          Defaults to ~/.secrets
        --help|?        - Print the help docs. Default behaviour.
        --man           - Print the full POD manual.

=head1 ACTIONS ONCE RUNNING

        list|ls         - List the available secret names.
        add             - Add a new secret. This prompts for username/passphrase etc.
        print <name>    - Print the passphrase and other notes about a particular secret.
        edit <name>     - Edit an existing secret.
        delete <name>   - Delete an existing secret.
        help            - Print help docs. Default action.
        exit|quit       - Exit the program.

=head1 DESCRIPTION

B<secrets> is a simple commandline passphrase keeper, written in perl, which
maintains an encrypted file containing a list of secrets. A secret is a set of
standard data like username, passphrase, URL, plus a block of unstructured
notes. This allows you to also store things like memorable dates or places,
favourite sports teams, mother's maiden names for each place you need a login.
Being able to make all this data up for each login, and remember it, means that
it's less likely that someone could masquerade as you.

B<secrets> currenty uses Blowfish, via Crypt::CBC to encrypt the secrets file.

Each secret contains the following fields.

=over 4

=item * Name - This is a required field, and holds the main identifier for this
secret. Examples might be "Online Bank", or "SSL certificate passphrase". This
field is shown in C<list> mode.

=item * Canonical name - This is derived from the Name field, and is currently
just a lowercased version. This is used as a hash key to prevent accidental
duplication due to case issues.

=item * Description - This is an optional short description of the secret. It is
shown in C<list> mode.

=item * Username - This is an optional field used to hold a username, login ID,
email address etc. 

=item * Passphrase - This is an optional field used to hold a passphrase. The
user enters this data twice to confirm that they have typed it correctly, and
no output is shown on the screen.

=item * Url - An optional field which can hold the URL of the service or login
page etc. No checking is done to make sure that the data in this field is
actually a URL.

=item * Notes - An optional multi-line free-text field. This can be used for
any arbitrary other information required about the secret. For example, an
online banking login may ask you for answers to questions such as mother's
maiden name, or memorable dates. It's more secure if you don't use real values
for these, and instead just make the answers up anew for each login.

=back

=cut

use Crypt::CBC;
use Data::Dumper;
$Data::Dumper::Sortkeys = 1;
use File::Slurp ();
use File::Spec  ();
use Getopt::Long qw( GetOptions );
use Pod::Usage qw( pod2usage );
use Storable      ();
use Term::ReadKey ();

our $VERSION = '1.002';
$VERSION = eval $VERSION;

my @valid_actions = qw( list ls add edit delete print help quit exit );
my @fields        = qw( Name Description Username Passphrase URL Notes );

{
    my $secrets_file = File::Spec->catfile( $ENV{HOME}, '.secrets' );
    my $show_help;
    my $show_man;

    GetOptions(
        'file=s' => \$secrets_file,
        'help|?' => \$show_help,
        'manual' => \$show_man,
    ) or pod2usage();

    pod2usage( -verbose => 99, -sections => 'SYNOPSIS|ACTIONS ONCE RUNNING' ) if $show_help;
    pod2usage( -verbose => 2 ) if $show_man;

    my $master_passphrase;
    if ( !-f $secrets_file ) {
        print "Unable to locate secrets file '$secrets_file'\n";
        if ( !get_yes_or_no("Would you like to create a new secrets file '$secrets_file'?") ) {
            print "Exiting...\n";
            exit;
        }
        $master_passphrase = get_new_master_passphrase();
    }

    $master_passphrase ||= get_master_passphrase();

    mainloop($secrets_file, $master_passphrase);

}

print "Exiting...\n";

exit;

=head1 SUBROUTINES

=cut

sub mainloop {
    my $secrets_file      = shift;
    my $master_passphrase = shift;

    my $format_checked;

    my $max_passphrase_age = 60 * 5;
    my $passphrase_last_supplied = time;
    MAINLOOP:
    while ( 1 ) {

        # Check how long it's been since the user last entered the master
        # passphrase.
        my $passphrase_age = time - $passphrase_last_supplied;
        if ( $passphrase_age > $max_passphrase_age ) {
            print "Timeout...\n";
            $master_passphrase        = get_master_passphrase();
            $passphrase_last_supplied = time;
        }

        # Try to read the secrets file - this serves to check that the
        # passphrase works. We reload the data for most operations later.
        read_secrets_from_file( $secrets_file, $master_passphrase );

        if ( ! $format_checked ) {
            $format_checked ++;
            if ( ! is_current_format($secrets_file, $master_passphrase) ) {
                print "ATTENTION: The secrets file is in an old format\n";
                print "The secrets file can be upgraded to the new format without any data loss.\n";
                print "Alternatively, you can choose to leave it in the old format if you prefer.\n";
                if ( get_yes_or_no("Do you want '$secrets_file' upgraded to the new format?") ) {
                    upgrade_secrets_file($secrets_file, $master_passphrase);    
                }
            }
        }

        my $command = get_user_input("Please supply an action (help to list, quit to quit): ");
        $command =~ s{ \s+ \z }{}xms;
        next MAINLOOP unless $command;

        if ( $command =~ m{ \A (\w+) (?: \s+ (\w+) )? \z }xms ) {
            my ($action, $name) = ($1, $2);

            next MAINLOOP unless $action;

            if ( ! grep { $_ eq $action } @valid_actions ) {
                print "'$action' is not a valid action\n";
                pod2usage(
                    -verbose  => 99,
                    -sections => 'ACTIONS ONCE RUNNING',
                    -output   => \*STDOUT,
                    -exitval  => 'NOEXIT',
                );
                next MAINLOOP;
            }

            last MAINLOOP if $action eq 'quit';
            last MAINLOOP if $action eq 'exit';

            if ( $action eq 'help' ) {
                pod2usage(
                    -verbose  => 99,
                    -sections => 'ACTIONS ONCE RUNNING',
                    -output   => \*STDOUT,
                    -exitval  => 'NOEXIT',
                );
            }
            elsif ( $action eq 'list' || $action eq 'ls' ) {
                list_secrets($secrets_file, $master_passphrase); 
            }
            elsif ( $action eq 'add' ) {
                add_secret($secrets_file, $master_passphrase, \@fields);
            }
            elsif ( $action eq 'edit' ) {
                if ( $name ) {
                    edit_secret($secrets_file, $master_passphrase, \@fields, $name);
                }
                else {
                    print "The 'edit' action needs a secret name: edit <name>. Please try again\n";
                    next MAINLOOP;
                }
            }
            elsif ( $action eq 'print' ) {
                if ( $name ) {
                    print_secret($secrets_file, $master_passphrase, \@fields, $name);
                }
                else {
                    print "The 'print' action needs a secret name: print <name>. Please try again\n";
                    next MAINLOOP;
                }

            }
        }

    }

}

=head2 add_secret( )

Add a new secret to file. This prompts the user for the various fields, does
some checking, adds the secret to the data structure, then saves it to the
file.

Expects:
    The secrets filename.
    The master passphrase.
    A list of fields to ask for.

Returns:
    Result of file save.

=cut

sub add_secret {
    my $secrets_file      = shift;
    my $master_passphrase = shift;
    my $fields            = shift;

    my $name;
    my $description;
    if ( my $new_secret = get_secret_fields( $fields ) ) {
        my $secrets = read_secrets_from_file($secrets_file, $master_passphrase);
        if ( $secrets->{ $new_secret->{canonical_name} } ) {
            print "ERROR: $new_secret->{name} already exists. Nothing will be saved...\n";
            return;
        }
        $secrets->{ $new_secret->{canonical_name} } = $new_secret;
        write_secrets_to_file( $secrets, $secrets_file, $master_passphrase );
        $name = $new_secret->{name};
        $description = $new_secret->{description};
    }
    else {
        print "ERROR: No new secret was added\n";
        return;
    }
    print "Added: $name :- $description\n";
    return 1;
}

=head2 edit_secret( )

Edit and existing secret. This prompts the user for the various fields, does
some checking, adds the updated secret to the data structure, then saves it to
the file.

Expects:
    The secrets filename.
    The master passphrase.
    A list of fields to ask for.
    The name of the secret to edit.

Returns:
    Result of file save.

=cut

sub edit_secret {
    my $secrets_file      = shift;
    my $master_passphrase = shift;
    my $fields            = shift;
    my $name              = shift;

    my $canonical_name = get_canonical_name($name);
    my $secrets = read_secrets_from_file($secrets_file, $master_passphrase);
    my $chosen_secret = delete $secrets->{$canonical_name};
    if ( ! $chosen_secret ) {
        print "ERROR: Unable to find a secret called '$name'\n";
        return;
    }
    if ( my $edited_secret = get_secret_fields( $fields, $chosen_secret ) ) {
        my $secrets = read_secrets_from_file($secrets_file, $master_passphrase);
        delete $secrets->{$canonical_name}; # We may have changed the name (and thus the canonical name)
        $secrets->{ $edited_secret->{canonical_name} } = $edited_secret;
        write_secrets_to_file( $secrets, $secrets_file, $master_passphrase );
        $name = $edited_secret->{name};
    }
    else {
        print "ERROR: '$name' was not changed\n";
        return;
    }
    print "'$name' was edited\n";
    return 1;
}
=head2 get_new_master_passphrase( )

Prompt the user twice for the passphrase to decrypt the secrets file. This is
done in 'noecho' mode, so the passphrase doesn't appear on the screen.

get_new_master_passphrase() will loop until it get two matching non-blank
passphrases, or it's killed.

This is called the first time a secrets file is used.

Expects:
    None.

Returns:
    String containing the new passphrase to be used to decrypt the secrets
    file.

=cut

sub get_new_master_passphrase {

    my $min_len = 3; # Low for testing.

    while ( 1 ) {
        my $master_passphrase = get_user_input( "Please enter a new master passphrase: ", 'noecho' );
        if ( length $master_passphrase < $min_len ) {
            print "ERROR: Passphrase is too short - must be $min_len chars\n";
            next;
        }
        my $confirm_passphrase = get_user_input( "Please confirm the new master passphrase: ", 'noecho' );

        if ( $confirm_passphrase eq $master_passphrase ) {
            return $master_passphrase; 
        }
        else {
            print "ERROR: Passphrases don't match\n";
        }
    }

}

=head2 get_master_passphrase( )

Prompt the user for the passphrase to decrypt the secrets file. This is done in
'noecho' mode, so the passphrase doesn't appear on the screen.

Expects:
    None.

Returns:
    String containing the passphrase to decrypt the secrets file.

=cut

sub get_master_passphrase {

    my $master_passphrase = get_user_input( "Please enter master passphrase: ", 'noecho' );

    return $master_passphrase;
}

=head2 print_secret( $secret, $fields )

Prints any set fields of the secret to STDOUT.

Expects:
    A hashref containing the secret data.
    An array ref containing the fields to print.

Returns:
    None.

=cut

sub print_secret {
    my $secrets_file      = shift;
    my $master_passphrase = shift;
    my $fields            = shift;
    my $name              = shift;

    my $canonical_name = get_canonical_name($name);
    my $secrets = read_secrets_from_file($secrets_file, $master_passphrase);
    my $chosen_secret = delete $secrets->{$canonical_name};
    if ( ! $chosen_secret ) {
        print "ERROR: Unable to find a secret called '$name'\n";
        return;
    }

    print "\n$chosen_secret->{name}\n", "=" x length( $chosen_secret->{name} ), "\n";
    foreach my $field ( @{$fields} ) {
        $chosen_secret->{ lc $field } && print "$field: $chosen_secret->{lc $field}\n";
    }
    print "\n";
}


=head2 get_secret_fields( )

Prompt the user for the required and optional data which make up a secret.

The user will be prompted for the passphrase twice to confirm that they have
typed it correctly, and no output is shown on the screen. The script dies if
the passphrases entered are different.

The notes field is a multi-line one, and is ended by a '.' on a line by itself.

This sub is pretty ugly, as it's trying to do ugly things.

Expects:
    An array ref of field names.
    An optional secreti.

Returns:
    Valid secret hash or undef.

=cut

sub get_secret_fields {
    my $fields = shift;
    my $secret = shift || {};

    FIELD:
    foreach my $field ( @{$fields} ) {

        # TODO: Look at embedding the mode and multiline stuff
        # into the $fields list itself.
        my $mode      = $field eq 'Passphrase' ? 'noecho' : 'normal';
        my $multiline = $field eq 'Notes'      ? 1        : 0;
        my $confirm   = $field eq 'Passphrase' ? 1        : 0;

        my $new_value;
        my $confirm_value;
        my $old_value = $secret->{ lc $field };

        if ( defined $old_value ) {

            # Show the previous value, and reuse it if the user just hits enter.
            my $old_value = $field eq 'Passphrase' ? '********' : $secret->{ lc $field };
            if ($multiline) {
                $new_value = get_multiline_user_input( "$field: [\n$old_value\n]", $mode );
                $confirm_value = get_multiline_user_input( "Confirm $field: ", $mode ) if $confirm;
            }
            else {
                $new_value = get_user_input( "$field [$old_value]: ", $mode );
                $confirm_value = get_user_input( "Confirm $field ", $mode ) if $confirm;
            }

        }
        else {

            # No previous value, so just prompt for new value.
            if ($multiline) {
                $new_value = get_multiline_user_input( "$field: ", $mode );
                $confirm_value = get_multiline_user_input( "Confirm $field: ", $mode ) if $confirm;
            }
            else {
                $new_value = get_user_input( "$field: ", $mode );
                $confirm_value = get_user_input( "Confirm $field: ", $mode ) if $confirm;
            }
        }

        # We want to ensure that if a confirmation value was given, that it matches
        # the other value.
        if ( $confirm && defined $new_value && $new_value ne $confirm_value ) {
            print "ERROR: $field values don't match. Please try again...\n";
            redo FIELD;
        }

        $secret->{ lc $field } = defined $new_value && length $new_value ? $new_value : $old_value;
    }
    $secret->{canonical_name} = get_canonical_name( $secret->{name} );

    return $secret;
}

=head2 get_canonical_name($name)

Expects:
    Name of a secret.

Returns:
    Lowercased, whitespace-free version of name.

=cut

sub get_canonical_name {
    my $name = shift;

    my $canonical_name = lc $name;
    chomp $canonical_name;
    $canonical_name =~ s{\s+}{_}gxms;

    return $canonical_name;
}

=head2 write_secrets_to_file( $secrets, $secrets_file, $passphrase )

Write the secrets data structure to the secrets file. The data is serialised
then encrypted, then written to disk.

NOTE: This will clobber any existing data in the file, so if you attempt to
write to the file from more then one process simultaneously, the last writer
will win.

TODO: Look at file locking code.

Expects:
    Secrets hash ref.
    Filename to write secrets to.
    Passphrase to encrypt the files contents.

Returns:
    None.

=cut

sub write_secrets_to_file {
    my $secrets      = shift;
    my $secrets_file = shift;
    my $passphrase   = shift;

    my $frozen = Storable::nfreeze($secrets);

    my $cipher = Crypt::CBC->new(
        -key    => $passphrase,
        -cipher => 'Blowfish'
    );

    my $ciphertext = $cipher->encrypt($frozen);

    File::Slurp::write_file( $secrets_file, { binmode => ':raw' }, $ciphertext );
}

=head2 read_secrets_from_file( $secrets_file, $passphrase )

Expects:
    Filename to read secrets from.
    Passphrase to decrypt the files contents.

Returns:
    If everything works (file exists, contains data, passphrase works), then an
    hash ref of secrets.
    Else undef.

=cut

sub read_secrets_from_file {
    my $secrets_file = shift;
    my $passphrase   = shift;

    # Non-existant file - we must be using a new secrets file for the first time. 
    return unless -f $secrets_file;

    # Read
    my $ciphertext = File::Slurp::read_file($secrets_file);
    return unless length $ciphertext;

    # Decrypt
    my $cipher = Crypt::CBC->new(
        -key    => $passphrase,
        -cipher => 'Blowfish'
    );
    my $frozen = $cipher->decrypt($ciphertext);

    # Deserialise
    my $secrets;
    eval { $secrets = Storable::thaw($frozen); };
    if ($@) {

        # We're using nfreeze, so we shouldn't ever run into issues thawing.
        # So, if there is an issue, we are going to assume that it's related
        # to having the wrong passphrase, and thus garbage data.
        # I can't see anything in Crypt::CBC which can tell us whether decryption
        # actually failed.

        die "ERROR: Unable to decrypt secrets file. Exiting...\n";
    }

    return $secrets;

}

=head2 get_yes_or_no( $prompt ) 

Prompt the user with a yes/no question, and loop until an answer is given.

A "<yes/no> " will be appended to the prompt.

Expects:
    A textual prompt to print. Can be blank.

Returns:
    false if the answer was no.
    true if the answer was yes.

=cut

sub get_yes_or_no {
    my $prompt = shift;

    $prompt .= " <yes/no> ";
    while (1) {
        ( my $input = lc get_user_input($prompt) ) =~ s{ \s+ \z }{}xms;
        return 1 if $input eq 'yes';
        return if $input eq 'no';
    }

}

=head2 get_user_input( $prompt, [$mode] ) 

Prompt the user for input, optionally hide what they're typing, and chomp any
string entered.

Expects:
    A textual prompt to print. Can be blank.
    A mode of normal|noecho when reading the input.

Returns:
    A chomped string from STDIN

=cut

sub get_user_input {
    my $prompt = shift || '';
    my $mode   = shift || 'normal';

    print $prompt;
    Term::ReadKey::ReadMode($mode);
    my $input = Term::ReadKey::ReadLine(0);
    Term::ReadKey::ReadMode('normal');
    print "\n" if $mode eq 'noecho';

    chomp $input;
    return $input;
}

=head2 get_multiline_user_input( $prompt, [$mode] ) 

Prompt the user for multiple lines ofinput, optionally hide what they're
typing, and chomp any string entered.

This is a loop around get_user_input().

Expects:
    A textual prompt to print. Can be blank.
    A mode of normal|noecho when reading the input.

Returns:
    A chomped string from STDIN

=cut

sub get_multiline_user_input {
    my $prompt = shift || '';
    my $mode   = shift || 'normal';

    print "$prompt\n(Enter a '.' on a line by itself to end)\n";
    my $input;
    while (1) {
        my $line = get_user_input( '', $mode );
        last if $line eq '.';
        $input .= "$line\n";
    }
    chomp $input if defined $input;
    return $input;
}

=head2 is_current_format( $secrets_file, $master_passphrase )

Check that the secrets data is in the format best supported by this version of
the secrets script.

Blank data is treated as being in the current format.

Expects:
    The secrets filename.
    The master passphrase.

Returns:
    Whether the data is in the current format.

=cut

sub is_current_format {
    my $secrets_file      = shift;
    my $master_passphrase = shift;

    my $secrets = read_secrets_from_file( $secrets_file, $master_passphrase );

    return 1 unless defined $secrets;

    return unless ref $secrets eq 'HASH';

    my ($test_key) = keys %$secrets;

    my $test_secret = $secrets->{$test_key};

    # Older versions used {password} instead.
    return 1 if exists $test_secret->{passphrase};

    return;
}

=head2 upgrade_secrets_file( $secrets_file, $master_passphrase )

Convert the secrets data structure to the new format, then write back to disk.

Expects:
    The secrets filename.
    The master passphrase.

Returns:
    Whether the secrets file was upgraded.

=cut

sub upgrade_secrets_file {
    my $secrets_file      = shift;
    my $master_passphrase = shift;

    my $secrets = read_secrets_from_file( $secrets_file, $master_passphrase );
    return if is_current_format($secrets_file, $master_passphrase);

    foreach my $key ( keys %$secrets ) {
       my $password = delete $secrets->{$key}->{password}; 
       $secrets->{$key}->{passphrase} = $password;
    }

    write_secrets_to_file($secrets, $secrets_file, $master_passphrase);

    return 1;
}

=head2 list_secrets( $secrets_file, $master_passphrase )

Print a list of secrets names and descriptions.

Expects:
    The secrets filename.
    The master passphrase.

Returns:
    None.

=cut

sub list_secrets {
    my $secrets_file      = shift;
    my $master_passphrase = shift;

    my $secrets = read_secrets_from_file( $secrets_file, $master_passphrase );

    # Ugh, two passes to make it pretty print
    my $max_name_len = 0;

    foreach my $canonical_name ( sort keys %{$secrets} ) {
        $max_name_len = length $secrets->{$canonical_name}->{name}
            if length $secrets->{$canonical_name}->{name} > $max_name_len;
    }
    foreach my $canonical_name ( sort keys %{$secrets} ) {
        printf "%-${max_name_len}s :- %s\n", 
            $secrets->{$canonical_name}->{name},
            $secrets->{$canonical_name}->{description} || '';
    }
}

__END__

=head1 CAVEATS

The author of this script isn't a security professional, and this script hasn't
been audited for flaws or bugs - which there certainly are.

This script does no file locking, so running it in parallel may result in data
loss, where the last writer wins.

There is no provision for backup files in the script. Any backups need to be
created outside of the program.

=head1 TODO

=over 4

=item * Work out what to do for timeouts. Currently it only notices the timeout in the
mainloop, so any actions which are started will not be timed-out until they've
finished.

=item * Provide a shorthand for editing the multi-line notes field when you
don't want to change anything. Currently you need to copy-n-paste the whole
thing.

=item * Allow you to change the master passphrase - will require reading the
file into memory, then prompting for new passphrase twice, then writing it back
out.

=item * Serialise using something different to Storable, to allow non-perl
scripts to also use the secrets file. JSON seems a likely contender, at the
expense of needing extra CPAN installs.

=item * Look at file locking to prevent data loss, or monitor file checksum to
see if it's changed since reading.

=item * Allow tweaking of encryption parameters.

=item * Enforce useful-length master passphrases.

=item * Look at what perl can do to make it more difficult to recover
passphrases from RAM.

=item * Look at ways to try and prevent the OS swapping the decrypted data to
disk.

=item * Look at pattern matching canonical names, rather than requiring exact
matches.

=item * Look at adding a group level of hierarchy, for example, being able to
group all your banking logins together somehow.

=back

=head1 SEE ALSO

=over 4

=item * B<pwsafe> from http://nsd.dyndns.org/pwsafe/

This is a commandline frontend to the B<Counterpane Password Safe> data files.

I used B<pwsafe> for a year or so, but was frustrated that it didn't allow me
to store much data about a particular login. B<secrets> shares some of the
basic process flow with B<pwsafe>, but adds a general notes storage. B<pwsafe>
has far more features than B<secrets>.

=back

=head1 AUTHOR

Dave Webb L<secrets.github@d5ve.com>

=head1 LICENSE

B<secrets> is free software. It comes without any warranty, to the extent permitted
by applicable law.

B<secrets> is released under the I<WTFPL Version 2.0> license - L<http://sam.zoy.org/wtfpl/COPYING>

0. You just DO WHAT THE FUCK YOU WANT TO.

=cut
