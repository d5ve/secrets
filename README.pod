=head1 NAME

secrets - Simple encrypted password and metadata store for commandline

=head1 SYNOPSIS

    All operations prompt for the master password before doing anything.

    Any operations which need the user to specify the name of a secret will
    prompt for it interactively, rather than passing it directly as an argument.
    This prevents the names of secrets appearing in the user's shell history.

    Usage: secrets [options] <action>

    Options:

        --file=FILE     - Optional file containing secrets.
                          Defaults to ~/.secrets
        --help|?        - Print the help docs. Default behaviour.


    Actions:

        list|ls         - List the available secret names.
        print           - Print the password and other metadata about a particular secret.
        add             - Add a new secret. This prompts for username/password etc.
        edit            - Edit an existing secret.
        delete          - Delete an existing secret.
        help            - Print help docs. Default action.


    Examples:
    
        # List the names of the stored secrets.
        $ secrets list
        $ secrets ls

        # Print to STDOUT the username/password and other metadata about
        # a secret.
        # You will be prompted for the name of the secret to print.
        $ secrets print 

        # Add/Edit/Delete a secret.
        # You will be prompted for the name of the secret.
        $ secrets add
        $ secrets edit
        $ secrets delete 

=head1 DESCRIPTION

secrets is a simple commandline password keeper, written in perl, which
maintains an encrypted file containing a list of secrets. A secret is a set of
standard data like username, password, URL, plus a block of unstructured
metadata. This allows you to also store things like memorable dates or places,
favourite sports teams, mother's maiden names for each place you need a login.
Being able to make all this data up for each login, and remember it, means that
it's less likely that someone could masquerade as you.

Each secret contains the following fields.

=over 4

=item * Name - This is a required field, and holds the main identifier for this
secret. Examples might be "Online Bank", or "SSL certificate password". This
field is shown in C<list> mode.

=item * Canonical name - This is derived from the Name field, and is currently
just a lowercased version. This is used as a hash key to prevent accidental
duplication due to case issues.

=item * Description - This is an optional short description of the secret. It is
shown in C<list> mode.

=item * Username - This is an optional field used to hold a username, login ID,
email address etc. 

=item * Password - This is an optional field used to hold a password. The user
enters this data twice to confirm that they have typed it correctly, and no
output is shown on the screen.

=item * Url - An optional field which can hold the URL of the service or login
page etc. No checking is done to make sure that the data in this field is
actually a URL.

=item * Metadata - An optional multi-line free-text field. This can be used for
any arbitrary other information required about the secret. For example, an
online banking login may ask you for answers to questions such as mother's
maiden name, or memorable dates. It's more secure if you don't use real values
for these, and instead just make the answers up anew for each login.

=back

=head1 CAVEATS

This script does no file locking, so running it in parallel may result in data
loss, where the last writer wins.

=head1 AUTHOR

Dave Webb L<secrets.github@d5ve.com>

=head1 LICENSE

secrets is free software. It comes without any warranty, to the extent permitted
by applicable law.

secrets is released under the I<WTFPL Version 2.0> license - L<http://sam.zoy.org/wtfpl/COPYING>

0. You just DO WHAT THE FUCK YOU WANT TO.

=cut
