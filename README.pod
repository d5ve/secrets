=head1 NAME

B<secrets> - Simple secure storage for logins and passphrases.

=head1 VERSION

1.01 - Rewrite for multiple operations.

=head1 SYNOPSIS

B<secrets> is a simple secure store for logins and passphrases.

    Usage: secrets [options] 

    Options:

        --file=FILE     - Optional file containing secrets.
                          Defaults to ~/.secrets
        --help|?        - Print the help docs. Default behaviour.
        --man           - Print the full POD manual.

=head1 ACTIONS ONCE RUNNING

        list|ls         - List the available secret names.
        add             - Add a new secret. This prompts for username/passphrase etc.
        print <name>    - Print the passphrase and other notes about a particular secret.
        edit <name>     - Edit an existing secret.
        delete <name>   - Delete an existing secret.
        help            - Print help docs. Default action.
        exit|quit       - Exit the program.

=head1 DESCRIPTION

B<secrets> is a simple commandline passphrase keeper, written in perl, which
maintains an encrypted file containing a list of secrets. A secret is a set of
standard data like username, passphrase, URL, plus a block of unstructured
notes. This allows you to also store things like memorable dates or places,
favourite sports teams, mother's maiden names for each place you need a login.
Being able to make all this data up for each login, and remember it, means that
it's less likely that someone could masquerade as you.

B<secrets> currenty uses Blowfish, via Crypt::CBC to encrypt the secrets file.

Each secret contains the following fields.

=over 4

=item * Name - This is a required field, and holds the main identifier for this
secret. Examples might be "Online Bank", or "SSL certificate passphrase". This
field is shown in C<list> mode.

=item * Canonical name - This is derived from the Name field, and is currently
just a lowercased version. This is used as a hash key to prevent accidental
duplication due to case issues.

=item * Description - This is an optional short description of the secret. It is
shown in C<list> mode.

=item * Username - This is an optional field used to hold a username, login ID,
email address etc. 

=item * Passphrase - This is an optional field used to hold a passphrase. The
user enters this data twice to confirm that they have typed it correctly, and
no output is shown on the screen.

=item * Url - An optional field which can hold the URL of the service or login
page etc. No checking is done to make sure that the data in this field is
actually a URL.

=item * Notes - An optional multi-line free-text field. This can be used for
any arbitrary other information required about the secret. For example, an
online banking login may ask you for answers to questions such as mother's
maiden name, or memorable dates. It's more secure if you don't use real values
for these, and instead just make the answers up anew for each login.

=back

=head1 CAVEATS

The author of this script isn't a security professional, and this script hasn't
been audited for flaws or bugs - which there certainly are.

This script does no file locking, so running it in parallel may result in data
loss, where the last writer wins.

There is no provision for backup files in the script. Any backups need to be
created outside of the program.

=head1 TODO

=over 4

=item * Provide a shorthand for editing the multi-line notes field when you
don't want to change anything. Currently you need to copy-n-paste the whole
thing.

=item * Allow you to change the master passphrase - will require reading the
file into memory, then prompting for new passphrase twice, then writing it back
out.

=item * Serialise using something different to Storable, to allow non-perl
scripts to also use the secrets file. JSON seems a likely contender, at the
expense of needing extra CPAN installs.

=item * Look at file locking to prevent data loss, or monitor file checksum to
see if it's changed since reading.

=item * Allow tweaking of encryption parameters.

=item * Enforce useful-length master passphrases.

=item * Look at what perl can do to make it more difficult to recover
passphrases from RAM.

=item * Look at ways to try and prevent the OS swapping the decrypted data to
disk.

=item * Look at pattern matching canonical names, rather than requiring exact
matches.

=item * Look at adding a group level of hierarchy, for example, being able to
group all your banking logins together somehow.

=back

=head1 SEE ALSO

=over 4

=item * B<pwsafe> from http://nsd.dyndns.org/pwsafe/

This is a commandline frontend to the B<Counterpane Password Safe> data files.

I used B<pwsafe> for a year or so, but was frustrated that it didn't allow me
to store much data about a particular login. B<secrets> shares some of the
basic process flow with B<pwsafe>, but adds a general notes storage. B<pwsafe>
has far more features than B<secrets>.

=back

=head1 AUTHOR

Dave Webb L<secrets.github@d5ve.com>

=head1 LICENSE

B<secrets> is free software. It comes without any warranty, to the extent permitted
by applicable law.

B<secrets> is released under the I<WTFPL Version 2.0> license - L<http://sam.zoy.org/wtfpl/COPYING>

0. You just DO WHAT THE FUCK YOU WANT TO.

=cut
