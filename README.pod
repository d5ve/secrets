=head1 NAME

B<secrets> - Simple secure storage for logins and passwords.

=head1 VERSION

0.90 - Just good enough for daily use.

=head1 SYNOPSIS

B<secrets> is a simple secure store for logins and passwords.

    Usage: secrets [options] <action>

    Options:

        --file=FILE     - Optional file containing secrets.
                          Defaults to ~/.secrets
        --help|?        - Print the help docs. Default behaviour.
        --man           - Print the full POD manual.

    Actions:

        list|ls         - List the available secret names.
        print           - Print the password and other notes about a particular secret.
        add             - Add a new secret. This prompts for username/password etc.
        edit            - Edit an existing secret.
        delete          - Delete an existing secret.
        help            - Print help docs. Default action.

    All operations prompt for the master password before doing anything.

    Any operations which need the user to specify the name of a secret will
    prompt for it interactively, rather than passing it directly as an argument.
    This prevents the names of secrets appearing in the user's shell history.

    Examples:
    
        # List the names of the stored secrets.
        $ secrets list
        $ secrets ls

        # Print to STDOUT the username/password and other notes about
        # a secret.
        # You will be prompted for the name of the secret to print.
        $ secrets print 

        # Add/Edit/Delete a secret.
        # You will be prompted for the name of the secret.
        $ secrets add
        $ secrets edit
        $ secrets delete 

=head1 DESCRIPTION

B<secrets> is a simple commandline password keeper, written in perl, which
maintains an encrypted file containing a list of secrets. A secret is a set of
standard data like username, password, URL, plus a block of unstructured
notes. This allows you to also store things like memorable dates or places,
favourite sports teams, mother's maiden names for each place you need a login.
Being able to make all this data up for each login, and remember it, means that
it's less likely that someone could masquerade as you.

B<secrets> currently uses Blowfish, via Crypt::CBC to encrypt the secrets file.

Each secret contains the following fields.

=over 4

=item * Name - This is a required field, and holds the main identifier for this
secret. Examples might be "Online Bank", or "SSL certificate password". This
field is shown in C<list> mode.

=item * Canonical name - This is derived from the Name field, and is currently
just a lowercased version. This is used as a hash key to prevent accidental
duplication due to case issues.

=item * Description - This is an optional short description of the secret. It is
shown in C<list> mode.

=item * Username - This is an optional field used to hold a username, login ID,
email address etc. 

=item * Password - This is an optional field used to hold a password. The user
enters this data twice to confirm that they have typed it correctly, and no
output is shown on the screen.

=item * Url - An optional field which can hold the URL of the service or login
page etc. No checking is done to make sure that the data in this field is
actually a URL.

=item * Notes - An optional multi-line free-text field. This can be used for
any arbitrary other information required about the secret. For example, an
online banking login may ask you for answers to questions such as mother's
maiden name, or memorable dates. It's more secure if you don't use real values
for these, and instead just make the answers up anew for each login.

=back

=head1 CAVEATS

The author of this script isn't a security professional, and this script hasn't
been audited for flaws or bugs - which there almost certainly are.

This script does no file locking, so running it in parallel may result in data
loss, where the last writer wins.

=head1 TODO

=over 4

=item * Serialise using something different to Storable, to allow non-perl
scripts to also use the secrets file. JSON seems a likely contender, at the
expense of needing extra CPAN installs.

=item * Look at file locking to prevent data loss.

=item * Allow tweaking of encryption parameters.

=item * Enforce useful-length master passwords.

=item * Look at what perl can do to make it more difficult to recover passwords
from RAM.

=item * Look at ways to try and prevent the OS swapping the decrypted data to
disk.

=item * Look at adding a group level of hierarchy, for example, being able to
group all your banking logins together somehow.

=back

=head1 SEE ALSO

=over 4

=item * B<pwsafe> from http://nsd.dyndns.org/pwsafe/

This is a commandline frontend to the B<Counterpane Password Safe> data files.

I used B<pwsafe> for a year or so, but was frustrated that it didn't allow me
to store much data about a particular login. B<secrets> shares some of the
basic process flow with B<pwsafe>, but adds a general notes storage. B<pwsafe>
has far more features than B<secrets>.

=back

=head1 AUTHOR

Dave Webb L<secrets.github@d5ve.com>

=head1 LICENSE

B<secrets> is free software. It comes without any warranty, to the extent permitted
by applicable law.

B<secrets> is released under the I<WTFPL Version 2.0> license - L<http://sam.zoy.org/wtfpl/COPYING>

0. You just DO WHAT THE FUCK YOU WANT TO.

=cut
